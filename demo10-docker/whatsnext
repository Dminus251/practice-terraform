1. terraform apply
2. terraform output -json > ./yyk-server/terraform_outputs.json 명령으로 output 저장
3. yyk-server에서 docker build -t dminus251/test:latest . 실행
4. docker login 후 docker push
5. public ec2로 ssh 전송
6. scp user@remote_host:/home/user_name으로 key 전송
7. key 이용해서 private ec2 ssh 연결 후 docker 설치
  sudo yum update -y \
  sudo yum install -y docker \
  sudo service docker start
8. docker pull
9. docker run -it 이미지

현재 컨테이너 내에서 curl http://localhost:5000/health 정상적으로 수행됨
하지만 컨테이너를 실행하는 private subnet에서는 불가능
보안그룹 같은거 더 봐야할 듯??

-> 아 해결했다 sudo docker run -p 5000:5000 dminus251/test:latest 명령으로 포트포워딩하니까 됨
이제 private subnet 말고 인터넷에서도 접근할 수 있도록 해보자

그러면 이제 다시 eks 활성화해서 로드밸런서로 접근해야 함
그러면 ingress와 service가 필요하고, 내 이미지로 연결되도록 해야 함
일단 컨테이너 실행은 수동으로 해보자

헬스 체크: curl http://localhost:5000/health

CREATE: curl -X POST http://localhost:5000/items -H "Content-Type: application/json" -d '{"name": "test_item1"}'
CREATE: curl -X POST http://localhost:5000/items -H "Content-Type: application/json" -d '{"name": "test_item2"}'
READ:  curl -X GET http://localhost:5000/items
UPDATE: curl -X PUT http://localhost:5000/items/2 -H "Content-Type: application/json" -d '{"name": "updated_item2"} #id가 2인 item을 update
DELETE: curl -X DELETE http://localhost:5000/items/2

현재 ubuntu에서 pod 띄우고 DNS로 접근되는지 테스트 중
일단 pod namespace도 namespace로 옮겨야 함
그리고 t apply마다 route53 호스팅 대상 로드밸런서 다시 선택해줘야 함

private에선 docker run으로 테스트 완료 나중에 kubernete 이용해서 pod형태로 실행하자
